Instalar Node.js v18.13.0 o superior.

//--------------Verificar PATH proyecto
    which node
Actualizar PATH proyecto
    export PATH=$PATH:/path/to/node/bin
    export PATH=$PATH:"/c/Program Files/nodejs"

Crear proyecto y posicionado en la raíz inicializar proyecto Node.js:
    npm init -y

Para permitir que el servidor Node.js acepte solicitudes de diferentes origenes middleware 'cors'
    npm install cors

//------------Dependencias necesarias:
npm install express multer

Inicializar server (posicionarse donde esta el archivo server.js):
	node server.js

Listar dependencias instaladas:
    npm list --depth=0

//------------Parsear XML y Comparar diferencias
Validación usando npm:
    npm list xmldom
    npm list diff
Si resultado = (empty) instalar:
    npm install xmldom diff
Desinstalar paquete:
    npm uninstall xmldom
Limpiar dependencias:
    npm prune
Eliminar carpeta dist y cache
    rm -rf dist
    rm -rf node_modules
    rm package-lock.json

    npm install
    npm update

//--------------Validar XML
Instalar biblioteca 'libxmljs2'
    npm install libxmljs2

//--------------Indice de archivos Git
Elimina los archivos del índice de Git sin borrarlos del sistema de archivos
    git rm -r --cached .
Añade los archivos nuevamente al índice de Git
    git add .

//----------------Agregar paseo
Instalar Shepherd.js: librería para crear tours interactivos con popups en páginas web.
    npm install parcel@latest

//------------------Script de Node.js con concurrently
Ejecutar múltiples comandos en paralelo
    npm install concurrently --save-dev
        Ejm: "start": "concurrently \"npm run start:server\" \"npm run start:parcel\""

//---------------instalar WebPack
    npm install webpack webpack-cli -D
Ejecutar webpack con la configuración personalizada
    npx --mode production --config webpack.config.js
Intalar Babel para utilidad en todos los navegadores
    npm install babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime -D
Instalar plugin para manejo de HTLM
    npm install html-webpack-plugin -D
Dependencias para manejo de CSS
    npm install mini-css-extract-plugin css-loader -D
Preprocesaror de stylus
    npm install stylus stylus-loader -D
Copia de archivos
    npm install copy-webpack-plugin -D
Mover archivos de fuentes
    npm install url-loader file-loader -D
Optimización de proyecto (minimizar css y JavaScript)
    npm i css-minimizer-webpack-plugin terser-webpack-plugin -D
Variables de entorno
    npm i dotenv-webpack -D
Limpiar el código para modo productivo
    npm i clean-webpack-plugin -D
Instalar stylus
    npm install stylus -D
Servidor para ver cambios en tiempo real (WebPack Dev Server)
    npm install webpack-dev-server -D
Optimizar paquetes y dependencias
    npm i webpack-bundle-analyzer -D
        Nota: ejecutar el comando
            npx webpack --profile --json > stats.json
            npx webpack-bundle-analyzer stats.json



Datos XML:

<tem:RegistrarPagoResponse xmlns:tem="http://tempuri.org/">
	<tem:RegistrarPagoResult>?</tem:RegistrarPagoResult>
</tem:RegistrarPagoResponse>

XML schema (XSD):

<s:schema xmlns:s="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://tempuri.org/">
	<s:element name="RegistrarPagoResponse">
		<s:complexType>
			<s:sequence>
				<s:element minOccurs="0" maxOccurs="1" name="RegistrarPagoResult" type="s:string"/>
			</s:sequence>
		</s:complexType>
	</s:element>
</s:schema>