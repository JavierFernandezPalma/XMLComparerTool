Instalar Node.js v18.13.0 o superior.
JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64

//--------------Verificar PATH proyecto
    which node
Actualizar PATH proyecto
    export PATH=$PATH:/path/to/node/bin
    export PATH=$PATH:"/c/Program Files/nodejs"

    export NVM_DIR="./tools/nvm_1.2.2"
    export PATH=$NVM_DIR:$NVM_DIR/nodejs:$PATH

Crear proyecto y posicionado en la raíz inicializar proyecto Node.js:
    npm init -y

Para permitir que el servidor Node.js acepte solicitudes de diferentes origenes middleware 'cors'
    npm install cors

//------------Dependencias necesarias:
npm install express multer

Inicializar server (posicionarse donde esta el archivo server.js):
	node server.js

Listar dependencias instaladas:
    npm list --depth=0

//------------Parsear XML y Comparar diferencias
Validación usando npm:
    npm list xmldom
    npm list diff
Si resultado = (empty) instalar:
    npm install xmldom diff
Desinstalar paquete:
    npm uninstall xmldom
Limpiar dependencias:
    npm prune
Eliminar carpeta dist y cache
    rm -rf dist
    rm -rf node_modules
    rm package-lock.json

    npm install
    npm update

//--------------Validar XML
Instalar biblioteca 'libxmljs2'
    npm install libxmljs2
Instalar biblioteca 'xsd-schema-validator'
    npm install xsd-schema-validator@latest

//------------Modulo stream para navegadores y polyfills
Necesario para tu configuración de Webpack
    npm install stream-browserify timers-browserify buffer
Polyfills para path, os, y crypto (requerido para WebPack >= 5)
    npm install path-browserify os-browserify crypto-browserify

//--------------Indice de archivos Git
Elimina los archivos del índice de Git sin borrarlos del sistema de archivos
    git rm -r --cached .
Añade los archivos nuevamente al índice de Git
    git add .

//----------------Agregar paseo
Instalar Shepherd.js: librería para crear tours interactivos con popups en páginas web.
    npm install parcel@latest

//------------------Script de Node.js con concurrently
Ejecutar múltiples comandos en paralelo
    npm install concurrently --save-dev
        Ejm: "start": "concurrently \"npm run start:server\" \"npm run start:parcel\""

//-------------------Herramienta criptográfica (deco Base64) node-forge y xml2js convertir XML en JavaScript
Cuando se combinan node-forge y xml2js, puedes leer datos criptográficos (como certificados) 
que están almacenados en XML, decodificarlos y procesarlos utilizando las herramientas 
criptográficas que ofrece node-forge.

    npm install node-forge xml2js

//---------------instalar WebPack
    npm install webpack webpack-cli -D
Ejecutar webpack con la configuración personalizada
    npx --mode production --config webpack.config.js
Intalar Babel para utilidad en todos los navegadores
    npm install babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime -D
Instalar plugin para manejo de HTLM
    npm install html-webpack-plugin -D
Dependencias para manejo de CSS
    npm install mini-css-extract-plugin css-loader -D
Preprocesaror de stylus
    npm install stylus stylus-loader -D
Copia de archivos
    npm install copy-webpack-plugin -D
Mover archivos de fuentes
    npm install url-loader file-loader -D
Optimización de proyecto (minimizar css y JavaScript)
    npm i css-minimizer-webpack-plugin terser-webpack-plugin -D
Variables de entorno
    npm i dotenv-webpack -D
        Variables para PDN
            npm i dotenv
Limpiar el código para modo productivo
    npm i clean-webpack-plugin -D
Instalar stylus
    npm install stylus -D
Servidor para ver cambios en tiempo real (WebPack Dev Server)
    npm install webpack-dev-server -D
Optimizar paquetes y dependencias
    npm i webpack-bundle-analyzer -D
        Nota: ejecutar el comando
            npx webpack --profile --json > stats.json
            npx webpack-bundle-analyzer stats.json

//---------------Manejos de errores con boom
npm i @hapi/boom -D

//---------------Validación de datos con joi
npm i joi -D

//--------------Docker
Iniciar los servicios
    docker-compose up -d <NOMBRE-SERVICIO(OPCIONAL)>
Mostrar los servicios actuales
    docker-compose ps
Detener los servicios actuales
    docker-compose down
Conectarse por medio de línea de comandos
    docker-compose exec mysql bash
Acceder a mysql
    mysql -h nombre_servidor -u nombre_usuario -p
        Para salir de la BD
            \c
            quit
            exit

//--------------Sequelize para manejo ORM recomendado para JavaScript
Intalar:
    npm install --save sequelize
Driver para mysql:
    npm install --save mysql2

    //-----------------------Migraciones sequelize
    Instalar:
        npm install sequelize-cli -D

//---------------------Agregar Swagger
Instalar:
    npm install swagger-jsdoc swagger-ui-express

//--------------

//---------------------Autenticación con JWT (JSON Web Token)
jsonwebtoken: Para crear y verificar JWT.
bcryptjs: Para cifrar las contraseñas.
Instalar:
    npm install jsonwebtoken bcryptjs

Datos XML:

<tem:RegistrarPagoResponse xmlns:tem="http://tempuri.org/">
	<tem:RegistrarPagoResult>?</tem:RegistrarPagoResult>
</tem:RegistrarPagoResponse>

XML schema (XSD):

<s:schema xmlns:s="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" targetNamespace="http://tempuri.org/">
	<s:element name="RegistrarPagoResponse">
		<s:complexType>
			<s:sequence>
				<s:element minOccurs="0" maxOccurs="1" name="RegistrarPagoResult" type="s:string"/>
			</s:sequence>
		</s:complexType>
	</s:element>
</s:schema>



PENDIENTE:

npm i @hapi/boom -D

added 2 packages, and audited 725 packages in 12s

104 packages are looking for funding
  run `npm fund` for details

7 vulnerabilities (1 low, 3 moderate, 1 high, 2 critical)

To address issues that do not require attention, run:
  npm audit fix

Some issues need review, and may require choosing
a different dependency.

Run `npm audit` for details.


------------------Script

-- Crear tabla 'procesos'
CREATE TABLE procesos (
    id_proceso INT AUTO_INCREMENT PRIMARY KEY,
    nombre_proceso VARCHAR(45) NOT NULL,
    descripcion TEXT
);

-- Crear tabla 'componentes'
CREATE TABLE componentes (
    id_componente INT AUTO_INCREMENT PRIMARY KEY,
    nombre_componente VARCHAR(45) NOT NULL,
    descripcion TEXT
);

-- Crear tabla 'errores'
CREATE TABLE errores (
    id_error INT AUTO_INCREMENT PRIMARY KEY,
    id_proceso INT NOT NULL,
    id_componente INT NOT NULL,
    descripcion_error TEXT NOT NULL,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Fecha de inserción
    fecha_modificacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,  -- Fecha de última modificación
    FOREIGN KEY (id_proceso) REFERENCES procesos(id_proceso),
    FOREIGN KEY (id_componente) REFERENCES componentes(id_componente)
);

-- Crear tabla 'causas' con eliminación en cascada al eliminar un error
CREATE TABLE causas (
    id_causa INT AUTO_INCREMENT PRIMARY KEY,
    id_error INT,
    descripcion TEXT NOT NULL,
    FOREIGN KEY (id_error) REFERENCES errores(id_error) ON DELETE CASCADE -- Relación con la tabla 'errores' eliminación en cascada
);

-- Crear tabla 'soluciones' con eliminación en cascada al eliminar una causa
CREATE TABLE soluciones (
    id_solucion INT AUTO_INCREMENT PRIMARY KEY,
    id_causa INT,
    descripcion TEXT NOT NULL,
    FOREIGN KEY (id_causa) REFERENCES causas(id_causa) ON DELETE CASCADE  -- Eliminación en cascada
);

-- Crear tabla 'imagenes' con relación a la tabla 'errores'
CREATE TABLE imagenes (
    id_imagen INT AUTO_INCREMENT PRIMARY KEY,
    id_error INT NOT NULL,  -- Clave foránea hacia 'errores'
    imagen_id CHAR(36) NULL,  -- UUID único para la imagen
    ruta_imagen VARCHAR(255) NULL,  -- Ruta de la imagen
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Fecha de inserción
    FOREIGN KEY (id_error) REFERENCES errores(id_error)  -- Relación con 'errores'
);

-- Insertar datos en la tabla 'procesos'
INSERT INTO procesos (nombre_proceso, descripcion)
VALUES
('Lanzamiento a Dev', 'Proceso de lanzamiento a ambiente de desarrollo'),
('Lanzamiento a QA', 'Proceso de lanzamiento a ambiente de calidad'),
('Lanzamiento a PDN', 'Proceso de lanzamiento a ambiente de producción');
('Pruebas request-response', 'Pruebas de servicios web donde se envía una solicitud (request) y se recibe una respuesta (response) para validar la funcionalidad del servicio');

-- Insertar datos en la tabla 'componentes'
INSERT INTO componentes (nombre_componente, descripcion)
VALUES
('DevOps', 'Plataforma utilizada para la integración y entrega continua'),
('DataPower', 'Plataforma de integración de servicios web y seguridad'),
('WSDL', 'Definición de servicios web para comunicaciones SOAP');
('SoapUI', 'Herramienta para pruebas de servicios web SOAP y RESTful');

-- Insertar datos en la tabla 'errores'
INSERT INTO errores (id_proceso, id_componente, descripcion_error, fecha_registro)
VALUES
(1, 1, 'Error de autenticación durante el despliegue', '2025-01-30 21:00:00'),
(2, 2, 'Error de WSDL no válido', '2025-01-30 21:10:00'),
(3, 3, 'Tiempo de espera agotado en la respuesta', '2025-01-30 21:20:00');

-- Insertar datos en la tabla 'causas'
INSERT INTO causas (id_error, descripcion)
VALUES
(1, 'Certificados no configurados correctamente'),
(2, 'Archivo WSDL incorrecto o corrupto'),
(3, 'Tiempo de espera demasiado corto para el servicio');

-- Insertar datos en la tabla 'soluciones'
INSERT INTO soluciones (id_causa, descripcion)
VALUES
(1, 'Verificar configuración de certificados en el servidor de destino'),
(2, 'Asegurarse de que el archivo WSDL sea el correcto y esté accesible'),
(3, 'Aumentar el tiempo de espera para la respuesta del servicio');

-- Insertar un registro de imagen asociado a un error
INSERT INTO imagenes (id_error, imagen_id, ruta_imagen)
VALUES (1, 'd8b2ab24-c345-4e29-9a8a-e5a4c5e0f1c4', '/uploads/imagenes/d8b2ab24-c345-4e29-9a8a-e5a4c5e0f1c4.png');